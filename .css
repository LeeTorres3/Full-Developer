.Ejemplo{ /* (.Ejemplo) es una muestra de una (class) en HTML*/
    color: black; /*Color de letra*/
    background-color: yellow;  /*Color del bloque*/
    font-size: 10px; /*Tamaño de letra*/
    font-family: Courier; /*Tipografía de letra*/
    font-style: italic; /*Letra en cursiva*/
    font-weight: bold; /*Letra en negrita*/
    height: 100px; /*Se ajusta la altura de un elemento (imagen)*/
    width: 150px; /*Se ajusta el ancho de un elemento (imagen)*/
    width: 100%; /*Podemos dimencionar el ancho drl elemento o imagen en este caso usando (%) al tamaño de nuestro bloque (div, section, body, etc...)*/
    border: solid;/*Se coloca un borde al rededor del elemento o texto justo al raz*/
    border: solid 10px; /*Se coloca un borde al rededor del elemento o texto con un grosor en px*/
    border: solid red;/*Se coloca un borde al rededor del elemento o texto con el color elejido*/
    border-radius: 10px;/*Se coloca un borde al rededor del elemento o texto pero se achatan las esquinas*/
    padding: 50px;/*Se usa para que el texto o elementos se ubiquen en el centro y el relleno este a los lados*/
    padding-left: 200px;/*Se usa para que el relleno esté de lado izquierdo y el texto de lado derecho*/
    padding-right: 200px;/*Se usa para que el relleno este de lado derecho y el texto de lado izquierdo*/
    padding-top: 20px;/*Se usa para que el relleno este en la parte superior y el texto en la parte inferior*/
    padding-bottom: 60px;/*Se usa para que el relleno este en la parte inferior y el texto en la parte superior*/
    text-align: start;/*Le da alineación al texto, coloca el texto de lado derecho de la pantalla*/
    text-align: end;/*Le da alineación al texto, coloca el texto de lado izquierdo de la pantalla*/
    text-align: left;/*Le da alineación al texto, lo coloca del lado lateral izquierdo de izquierdas a derecha*/
    text-align: right;/*Le da alineación al texto, lo coloca del lado lateral derecho de derecha a izquierda*/
    text-align: justify;/*Le da alineación al texto, se parece añ left, de izquierda a derecha, pero este se extiende de lateral a lateral*/
    text-align: center;/*Le da la anileación al texto y lo coloca de manera centrada*/
    margin: 30px;/*Le coloca margen al texto o elemento*/
    margin-top: 20px;/*Coloca el margen del texto o elemento en la parte superior*/
    margin-bottom: 100px;/*Coloca el margen del texto o elemento en la parte inferior*/
    margin-left: 20px;/*Coloca el margen del texto o elemento de lado izquierdo*/
    margin-right: 20px;/*Coloca el margen del texto o elemento de lado derecho*/
    padding: /*top*/20px /*right*/20px /*bottom*/20px /*left*/20px;/*Así establecemos los paddings laterales, superior e inferior al mismo tiempo, de una manera más eficiente y compacta, el sentido va como en las manecillas del reloj*/
    margin:  /*top*/20px /*right*/20px /*bottom*/20px /*left*/20px;/*Así establecemos los márgenes laterales, superior en inferior de una manera más eficiente y compacta, creando estilos únicos en nuestros márgenes*/
    border-radius: /*arriba izquierda*/20px /* arriba derecha*/20px /*abajo derecha*/20px /*abajo izquierda*/20px;/*Así establecemos los márgenes laterales, superior en inferior de una manera más eficiente y compacta, creando estilos únicos en nuestros márgenes*/
    transform: rotate(90deg);/*Sirve para rotar un elemento, rotara en grados, en la dirección de las manesillas del reloj*/
    transform: rotate(-90deg);/*Sirve para rotar un elemento, rotara en grados, como tiene un signo de menos (-) rotara en la dirección opuesta de las manesillas del reloj (sentido antihorario)*/
    filter: blur(2px);/*Esta propiedad junto con la función (blur) hacen que un elemento se desvanesca o se haga borroso*/
    filter: grayscale(100%);/*Convierte la imagen o elemento en color gris o blanco y negro (mayor % más gris la imagen o elemento)*/
    filter: opacity(50%);/*La imagen o elemento se ve más opaca y con falta de saturación de color (menor % mas opaca la imagen o elemeto)*/
    filter: brightness(100%);/*Ajusta el brillo de la imagen (mayor % mayor brillo, y menor % la imagen es obscura) se puede poner valor mayor a 100%*/
    filter: saturate(100%);/*Ajusta la intensidad y saturación de colores de la imagen (mayor % mayor saturación, y menor % la imagen es descolorida) se puede poner valor mayor a 100%*/
    filter: contrast(85%);/*Ajusta la diferencia entre partes claras y obscuras de la imagen (entre menor % mas gris sera la imagen) se puede poner valor mayor a 100%*/
    /*El 100% es el valor predeterminado*/
    background: linear-gradient(lightCyan, skyBlue, deepSkyBlue);/*Se coloca degradado de colores de arriba hacia abajo*/
    background: linear-gradient(90deg, yellow, lightGreen);/*Se coloca un degradado de izquierda a derecha colocandolo en grados (deg)*/
    background: linear-gradient(45deg, blue, lightGreen);/*Se coloca el degradado de forma diagonal y el degradado se hace de lado derecho*/
    /*La dirección de los degradados van en dirección de las agujas del reloj de 0deg a 360deg*/
    /*Se pueden usar colores más específicos llamados colores hexadecimales #000000, estos pueden ser carácteres del (0 al 9) o de (A a la F), saber las combinaciones corresctas nos dan millones de colores, se mezclan los colores (Rojo, Verde y Azúl)*/
    background-color: #FF0000/*Red*/, #00FF00/*Green*/, #0000FF/*Blue*/; /*Ejemplo de colores hexadecimales*/
/* h2, .Ejemplo, p {
    Esto es un ejemplo de un selector de agrupación, sirve para aplicarle la edición con una misma regla a varios elementos 
}*/
    display: inline;/*Pone en una misma linea el texto, no nos permite cambiar su tamaño, funciona con: (a, em y strong)*/
    display: block;/*Pone en otra linea el texto ya que ocupan todo el ancho de la página, no nos permite cambiar su tamaño, funciona con: (p, div y h1)*/
    display: inline-block;/*Pone el elemento en la misma linea, si nos permite cambiar su tamaño, funciona con: (img y button)*/
    float: right; /*Hace que la imagen o elemento quede de lado derecho del texto, hace que tenga wrap, esta propiedad aplica a imag*/
    float: left; /*Hace que la imagen o elemento quede de lado izquierdo del texto, hace que tenga wrap, esta propiedad aplica a img*/
    /*Wrap: es que los elementos esten en una sola fila o columna*/
    clear: right;/*Es para poner un texto abajo del contenido de la imagen y texto, la imagen de arriba permanecera de lado derecho, por eso ponemos right, esta propiedad aplica a textos, hace que no tenga wrap*/
    clear: left;/*Es para poner un texto abajo del contenido de la imagen y texto, la imagen de arriba permanecera de lado izquierdo, por eso ponemos left, esta propiedad aplica a textos, hace que no tenga wrap*/
    position: relative; /*Sirve para cambiar la posición del elemento o texto en relación a su posición original*/
    top: 30px;/*Se usa con (position: relative;) y coloca la cantidad indicada de pixeles de su posición original y pone el elemento en la parte inferior (abajo)*/
    right: 30px;/*Se usa con (position: relative;) y coloca la cantidad indicada de pixeles de su posición original y pone el elemento en la parte lateral izquierda (izquierda)*/
    bottom: 30px;/*Se usa con (position: relative;) y coloca la cantidad indicada de pixeles de su posición original y pone el elemento en la parte superior (arriba)*/
    left: 30px;/*Se usa con (position: relative;) y coloca la cantidad indicada de pixeles de su posición original y pone el elemento en la parte lateral derecha (derecha)*/
    position: absolute;/*Sirve para cambiar la posición del elemento o texto, y lo mueve hacia la dirección que le indiquemos, tambien usa otro flujo anormal, puede enpalmar elementos en otros*/
    top: 20px;/*Se usa con (position: absolute;) lo mueve totalmente para la parte superior de la página, los (px) indican el espacio de separacion de la parte superior*/
    right: 20px;/*Se usa con (position: absolute;) lo mueve totalmente para la parte lateral derecha de la página, los (px) indican el espacio de separacion de la parte lateral derecha*/
    bottom: 20px;/*Se usa con (position: absolute;) lo mueve totalmente para la parte inferior de la página, los (px) indican el espacio de separacion de la parte inferior*/
    left: 20px;/*Se usa con (position: absolute;) lo mueve totalmente para la parte lateral izquierda de la página, los (px) indican el espacio de separacion de la parte lateral izquierda*/
    z-index: -1;/*Se usa para colocar un elemento detras de otro como si fuera un fondo*/
    z-index: 0;/*Todos los elemento por defecto predeterminado tienen estan en 0, estos pueden ir encima de los elemetos -1*/
    z-index: 1;/*Se usa para colocar un elemento encima de otro como si se empalmara*/
    /*Los z-index pueden tener numeros positivos y negativos, los positivos más altos se empalmaran sobre los más bajos*/
    display: flex;/*Hace que los elementos se adapten en tamaño para que quepan todos de manera simétrica en la página o contenedor, los alinea en una sola fila, hasta modifica el tamaño de los elementos para que quepan en una sola fila, pero si el elemento es muy aplio no podra dividirse y se desbordara del contenedor, para usarlo debemos poner <div> anidado dentro de otro <div> en nuestro HTML*/
    flex-direction: row;/*Sirve para que la dirección de los elementos sea de forma horizontal de izquierda a derecha, este es el valor predeterminado que tienen todos los elementos en (flex)*/
    flex-direction: column;/*Sirve para que la dirección de los elementos sea de forma vertical de arriba a abajo*/
    flex-direction: row-reverse;/*Sirve para que la dirección de los elementos sea de forma horizontal de derecha a izquierda, de forma inverida a (row)*/
    flex-direction: column-reverse;/*Sirve para que la dirección de los elementos sea de forma vertical de abajo hacia arriba, de forma invertida a (column)*/
    justify-content: flex-start;/*Los elementos los acomoda al inicio del contenedor, de manera horizontal o verical dependiendo si la direccion es row o column*/
    justify-content: flex-end;/*Los elementos los acomoda al final del contenedor, de manera horizontal o vertical dependiendo si la direccion es row o column*/
    justify-content: center;/*Los elementos los acomoda en el centro del contenedor, funcionan tanto en row y column*/
    justify-content: space-around;/*Los elementos los acomoda espaciados y los distribuye de manera simetrica por todo el contenedor pero teniendo un espacio entre el borde y el primer y ultimo elemento, funcionan tanto en row y column*/
    justify-content: space-between;/*Los elementos los acomoda espaciados y los distribuye de manera simetrica por todo el contenedor pero los elementos ultimos y primeros se repegan totalmente al borde, funcionan tanto en row y column*/
    align-items: stretch;/*Hace que los elementos llenen todo el espacio del contenedor de manera vertical si la dirección es en row, pero si la dirección es en column llenan todo el espacio del contenedor de manera horizontal*/
    align-items: flex-start;/*Hace que los elementos tomen el tamaño de su contenido y los alinian al comienzo del contenedor (lado superior izquierdo) esto en la direccion row, en la dirección column hace lo mismo pero de manera vertical (lado superior izquierdo)*/
    align-items: flex-end;/*Hace que los elementos tomen el tamaño de su contenido y los alinian al final del contenedor (lado inferior izquierdo) esto en la direccion row, en la dirección column hace lo mismo pero de manera vertical (lado superior derecho)*/
    align-items: center;/*Hace que los elementos tomen el tamaño de su contenido y los alinian al centro del contenedor (lado central izquierdo) esto en la direccion row, en la dirección column hace lo mismo pero de manera vertical (lado superior central*/
    flex-wrap: nowrap;/*Hace que si los elementos ya no pueden encogerse se desbordaran de su contenedor, es el valor predeterminado de todos los elementos, funcióna en dirección row y column*/
    flex-wrap: wrap;/*Hace que los elementos dirección row que ya no puedan encogerse comiencen una nueva linea abajo de los otros elementos para evitar que se desborden del contenedor, los elementos dirección column los elementos se colocaran de lado derecho de los otros elementos y el sentido será en verical*/
    flex-wrap: wrap-reverse;/*Hace que los elementos en dirección row que ya no puedan encogerse comiencen una nueva linea arriba de los otros elementos para evitar que se desborden del contenedor, los elementos dirección column los elementos se colocaran de lado izquierdo de los otros elementos y el sentido será en verical*/
    align-content: stretch; /*Hace que los elemetos se estiren hasta donde se ubique el otro elemento, puede ser de manera vertical u horizontal, funciona en dirección row y column, abarca todo el espacio del contenedor*/
    align-content: flex-start;/*Hace que los elementos se estiren de manera horizontal u vertical hasta donde se ubique el otro elemento, comenzando en la parte superior*/
    align-content: flex-end;/*Hace que los elementos se estiren de manera horizontal u vertical hasta donde se ubique el otro elemento, comenzando en la parte inferior*/
    align-content: center;/*Hace que los elementos se estiren de manera horizontal u vertical hasta donde se ubique el otro elemento, comenzando en la parte central*/
    align-content: space-around;/*Hace que los elementos esten espaciados uno del otro pero sin pegarse con los bordes del contenedor*/
    align-content: space-between;/*Hace que los elementos esten espaciados uno del otro y se pega con los bordes del contenedor*/
    flex-basis: auto;/*Los elementos tienen el tamaño de su contenido, (auto) es el valor predeterminado de todos los elementos*/
    flex-basis: 100px;/*Establece el tamaño de un elemento en (px) pixeles*/
    flex-basis: 50%;/*Establece el tamaño de un elemento en (%) porcentaje, dependiendo del tamaño del contenedor en el que se encuentra sera el tamaño que se le dara al elemento*/
    /*(flex-basis) esta vinculado con la dirección row y column, si es dirección row va a determinar el ancho de un elemento, y si la dirección es column va a determinar la altura del elemento*/
    flex-grow: 0;/*Con el valor en 0 flex-grow no hara crecer el elemento y se quedara en su tamaño predeterminado*/
    flex-grow: 1;/*Con el valor 1 flex-grow hara que el elemento crezca y abarque todo el espacio disponible a lo ancho en el caso de la direccion row y a lo alto en la direccion column, hasta encajonar a los otros elementos, si ponemos a todos los elementos el (1) todos creceran del mismo tamaño y llenaran el contenedor*/
    flex-grow: 2;/*Con los valores arriba de uno podemos agrandar el elemento del tamaño que queramos y este empujara a los otros elementos llenando el contenedor, puede contener 0,1,2,3...etc, o bien: 10,20,30,45...etc*/
    flex-shrink: 0;/*Hace que el elemento se encoja, en 0 no se encojera nada y puede que los elementos se desborden de su contenedor*/
    flex-shrink: 1;/*El elemento se encoje más dependiendo que tan grande sea el número establecido, entre más grande el número más se encojera el elemento, se puede usar: 0,1,2,3...etc, el 1 es el valor predeterminado de todos los elementos*/
    flex: 0 1 auto;/*Se combina los flex y van en el siguiente orden: flex-grow, flex-shrink y flex-basis, en este ejemplo cada uno lo ponemos con sus valores predeterminados, asi podremos modificar el tamaño del elemento de una manera más compactay organizada*/
    display: grid;/*Crea un contenedor para poner elementos en distintas posiciones, vertical y horizontal en un mismo contenedor, para editarlo podemos usar: (grid-template-colums), si hay mas elementos que no caben en ele contenedor, estos se irán recorriendo a la siguiente fila*/
    grid-template-columns: 50px 50px 120px;/*Asigna el valor del tamaño de los elementos dentro del contenedor, por ejemplo: 1er elemento: 50px, 2do elemento: 50px, 3er elemento: 120px, 4to elemento: 50px, etc..., los elementos se ponen en columna y mientras se encuentren en la posición de los demás elementos de arriba tendrán ese tamaño, como se muestra en el ejemplo*/
    grid-template-columns: 20% 10% 80px;/*El tamaño de los elementos los determina en (%) porcentaje y se puede convinar con las fracciones y pixeles, entre mayor sea el porcentaje mayor será el tamaño del elemento*/
    grid-template-columns: auto auto 10px;/*El valor (auto) hace que el elemento ocupe el mayor espacio disponible en el contenedor*/
    grid-template-columns: 1fr 2fr 1fr;/*El valor (fr) significa unidad de medida en fracción, distribuye el espacio del contenedor en fracciones, entre mayor numero entero mayor será el tamaño del elemento, si ponemos por ejemplo 1fr 1fr estos dos elementos en el contenedor se dividiran ene partes iguales y ocuparan todo el espacio del contenedor*/
    grid-template-columns: 50px 1fr 2fr;/*Los (px) pixeles se pueden convinar con las (fr) fracciones, el primer valor respetara el tamaño de 50px y los otros dos ocuparan el espacio disponible que sobre y se dividiran de manera fraccionada*/
    grid-template-columns: repeat(3, 1fr);/*Hace que los elementos se pongan en la cantidad de fracciones que lo queramos dividir, es un atajo, es una manera más compacta y ordenada de poner: grid-template-columns: 1fr 1fr 1fr, el primer valor es la cantidad de columnas que habrá*/
    grid-template-rows: 50px 10% 1fr;/*Los elementos se establecen su tamaño en filas, uno a lado de otro elemento, se puede usar unidad de medida px, % y fr y se pueden combinar entre ellas*/
    grid-template-rows: auto auto;/*Hace que la columna ocupe el máxico espacio disponible dentro del contenedor*/
    grid-template-rows: repeat(3, 40px);/*Hace que alla 3 filas de elementos dentro del contenedor, cada elemento con una altura de 40px*/
    grid-template: 50px 50px / 80px 80px;/*Coloca los elementos en filas y columnas, los valores de la izquierda son filas (row) y los valores de la derecha son columnas (column), estas dos se combinan, en este caso se colocaria 2 filas de 50px ele elemento por dos columnas de 80px ele elemento*/
    grid-template: 1fr auto / 30% 30px;/*Se puede combinar pixeles (px), porcentajes (%) y fracciones (fr), al igual que (auto) que ocupa el mayor espacio disponible en el elemento*/
    row-gap: 5px;/*Se utiliza para que los elementos en cuadricula (grids) tengan un espacio de forma horizontal, el espacio de px se aplica hacia abajo, es como si pusieramos (margin) pero dentro del contenedor*/
    column-gap: 5px;/*Hace que los elementos en cuadricula tengan un espacio de manera vertical, los elementos de alado son los que tienen el espacio de px*/
    gap: 5px 10px;/*Pone espacio entre los elementos de cuadricula al mismo tiempo, el primer valor es de las filas (row) y el segundo valor es de las columnas (column)*/
    gap: 10px;/*Si solo se coloca un valor en el gap, este valor se aplicara de misma manera para row y column, da el espacio igual*/
    grid-column: span 2;/*Sirve para expandir un elemento en lo ancho, los valores despues del (span) son que el elemento abarcara cierta cantidad de tamaño (columnas) a lo ancho, se dvivide en columnas*/
    grid-row: span 3;/*Sirve para expandir un elemento a lo alto, los valores despues del (span) son que el elemento abarcara cierta cantidad de tamaño (filas) a lo alto, se divide en filas*/
    grid-area: item1;/*En nuestro HTML agregamos clases con nombres los cuales seran el nombre de nuestra area, (grid-area) asigna el nombre de esas clases para editar los elementos con CSS*/
    grid-template-areas: item1 item2 item3;/*Creamos una fila cudriculada con tres columnas y esos elementos se expamden por todo el contenedor, agregamos los nombres de las areas ya asignadas*/
    grid-template-areas: item1 item1 item2;/*Si queremos ocupar mas espacio ponemos repetidas veces el nombre del elemento para que ocupe ese espacio en el contenedor, por ejemplo: (item1 item1 item2)*/
    grid-template-areas:  item1  item2;/*poner . o ... Dejamos espacio entre un elemento y otro dentro de las areas de la cuadricula (. item1 . item2*/
    grid-template-areas: "item1 item2" "item3 item4";/*Cada elemento que esta en cada comilla es un elemento, sirve para cuando tenemos varios elementos dentro del contenedor, entonces en este ejemplo hay 2 filas en el contenedor*/
    
}



